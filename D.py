# 標準入力を受け付ける。
Q = int(input())

N = 1048576
A = [-1] * N

# あるhを代入した時に、次のA[h] == -1を早期に発見するために利用する。
nx = list(range(1, N)) + [0]

def update(h, x):
    if A[h] == -1:
        A[h] = x
        return h

    # A[h] == -1が見つかるまで、hの探索を行う。
    #
    # <入力ケース>
    # 6
    # 1 1048577
    # 1 1048577
    # 1 1048577
    # 1 1048577
    # 1 1048577
    # 2 1
    # を考えるとわかりやすい。
    #
    # nxの値は以下のようになっていく。hを+1するよりもスムーズにA[h] == -1を探せるようになる。
    # [1, 2, 3, 4, 5, ..., 0]
    # [1, 3, 3, 4, 5, ..., 0]
    # [1, 4, 3, 4, 5, ..., 0]
    # [1, 5, 3, 4, 5, ..., 0]
    nx[h] = update(nx[h], x)

    return nx[h]

for _ in range(Q):
    t, x = map(int, input().split())
    if t == 1:
        update(x % N, x)
    if t == 2:
        print(A[x % N])
